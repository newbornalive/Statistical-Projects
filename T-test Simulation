sample.int(n, size = n, replace = FALSE, prob = NULL)

qt(0.995,8)

qt(c(.025, .975), df=23)
2*pt(-abs(t),df=n-1)



2*pt(-3.355,8) # two-sided
z=c(1,0,2,0,3,1,0,1,2,0,2)

Z=c(1,0,2,0,3,1,0,1,2,0)
mean(z)
mean(Z)

sum((z-1)^2)

sum((Z-1)^2)
sqrt(2.2*(1+1/10+1/10))

2.2*(1/3+1/10+1/10)
sqrt(2.2/3+0.663^2)
z=c(16.0, 9.0  ,17.0 ,12.0 ,22.0 ,13.0  ,8.0 ,15.0,19.0,11.0)
dbinom(0, size=10, prob=0.05)

2*exp(-2*(0.7^2)*10)
dbinom(0, size=10, prob=0.55)
1-(1-3.405/10000)^1000
choose(3,2)

perm = function(n, x) {
    return(factorial(n) / factorial(n-x))
}
comb = function(n, x) {
     return(factorial(n) / (factorial(x) * factorial(n-x)))
     }


#toss a coin 1000 times
sequencecointoss<-sample(c(-1,1),1000,replace=T)

#final p&l value 
cumsum(sequencecointoss)


#store every final p&l value in a list()
# Create an empty list to store the results
# reapeat coin toss experiment 10000 times
results <- list()
for(i in 1:10000) {
    coinTosses   <- cumsum(sample(c(-1,1), 1000, replace = TRUE)) 
    results[[i]] <- coinTosses[length(coinTosses)]
}


# Unlist the list and create a histogram. Set a title and set the color and breaks
hist(unlist(results), main = "Histogram of all the final p&l's",col = "lightblue", breaks = 100)

# Place a vertical line at 0 with a width of 2 in order to show the average of the distribution
abline(v = 0, col = "red", lwd = 2)

# Sum up binomail distrubition from r=13 to r=25,p=0.9
result <- list()
for (i in 13:25) {
    result[[i]] <- dbinom(i, size=25, prob=0.9)
}
result[[13]]
sum(unlist(result))
0.9*sum(unlist(result))
#answer is 0.8999999

# Sum up binomail distrubition from r=13 to r=25,p=0.9
result1 <- list()
for (i in 13:25) {
    result1[[i]] <- dbinom(i, size=25, prob=0.1)
}
0.1*sum(unlist(result1))


mydata = read.csv("data.csv", header = T)
mydata

dotchart(mydata[,2],main='Route')

# FOr finding sse of different lambda

mydata = read.csv("data1.csv", header = F)
mydata

gmean <- exp(mean(log(mydata$V1)))
sse <- c()
lambda<-c()
i <- 1
for (lam in seq(0.3,0.7,0.1)){
 if (lam != 0){
      tY <- (mydata$V1^lam - 1) / (lam*gmean^(lam-1))
 }
    else {
         tY <- log(level)*gmean
         }
    test <- anova(lm(tY~mydata$V2))
      sse[i] <- test['Residuals','Sum Sq']
      lambda[i] <- lam
  i <- i+1
}
cbind(lambda,sse)
model <- lm((mydata$V1^0.5)~mydata$V2)
plot(mydata$V2,model$residuals)


a <- mtcars$mpg
b <- mtcars$wt
fitCar<-lm(a ~ b)
predict(fitCar,data.frame(b=mean(b)), interval="confidence")

qf(.99, df1=1, df2=13) # 99% percentile

pf(42.219, df1=1, df2=13,lower.tail=F) # upper percentile 
pf(0.363, df1=3, df2=13)

